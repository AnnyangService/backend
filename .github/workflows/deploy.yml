name: Deploy to Production

on:
  push:
    branches: [ main ]  # main 브랜치에 push될 때 실행
  workflow_dispatch:    # 수동 실행 트리거 추가

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write   # OIDC에 필요한 권한
      contents: read    # 코드 체크아웃에 필요한 권한
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ap-northeast-2
        
    - name: Get Parameters from SSM
      id: get-ssm-params
      run: |
        DB_URL=$(aws ssm get-parameter --name "/annyang/db/url" --with-decryption --query "Parameter.Value" --output text)
        DB_USERNAME=$(aws ssm get-parameter --name "/annyang/db/username" --with-decryption --query "Parameter.Value" --output text)
        DB_PASSWORD=$(aws ssm get-parameter --name "/annyang/db/password" --with-decryption --query "Parameter.Value" --output text)
        
        # CodeDeploy 관련 파라미터 가져오기
        CODEDEPLOY_APP_NAME=$(aws ssm get-parameter --name "/annyang/deploy/api-server/app_name" --query "Parameter.Value" --output text)
        CODEDEPLOY_GROUP_NAME=$(aws ssm get-parameter --name "/annyang/deploy/api-server/group_name" --query "Parameter.Value" --output text)
        CODEDEPLOY_BUCKET=$(aws ssm get-parameter --name "/annyang/deploy/api-server/bucket" --query "Parameter.Value" --output text)
        
        echo "DB_URL=$DB_URL" >> $GITHUB_ENV
        echo "DB_USERNAME=$DB_USERNAME" >> $GITHUB_ENV
        echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
        
        # CodeDeploy 파라미터를 환경 변수로 저장
        echo "CODEDEPLOY_APP_NAME=$CODEDEPLOY_APP_NAME" >> $GITHUB_ENV
        echo "CODEDEPLOY_GROUP_NAME=$CODEDEPLOY_GROUP_NAME" >> $GITHUB_ENV
        echo "CODEDEPLOY_BUCKET=$CODEDEPLOY_BUCKET" >> $GITHUB_ENV
        
    - name: Variable Substitution
      uses: microsoft/variable-substitution@v1
      with:
        files: 'src/main/resources/application-prod.yml'
      env:
        spring.datasource.url: ${{ env.DB_URL }}
        spring.datasource.username: ${{ env.DB_USERNAME }}
        spring.datasource.password: ${{ env.DB_PASSWORD }}
        jwt.secret: ${{ secrets.JWT_SECRET }}
        jwt.expiration: ${{ secrets.JWT_EXPIRATION }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        
    - name: Build with Gradle
      run: ./gradlew build  # 테스트 포함
    
    - name: Set JAR filename
      id: jar-filename
      run: |
        echo "JAR_FILE=$(ls build/libs/hi_meow-*.jar | xargs basename)" >> $GITHUB_OUTPUT
        
    - name: Prepare Deployment Bundle
      run: |
        mkdir -p codedeploy-bundle
        cp build/libs/${{ steps.jar-filename.outputs.JAR_FILE }} codedeploy-bundle/hi-meow-app.jar
        cp .github/deploy/appspec.yml codedeploy-bundle/
        cp -r .github/deploy/scripts codedeploy-bundle/
        cd codedeploy-bundle
        zip -r ../deploy.zip .
        cd ..
        
    - name: Upload to S3
      run: |
        aws s3 cp deploy.zip s3://${{ env.CODEDEPLOY_BUCKET }}/hi-meow-app/deploy-${{ github.run_number }}.zip
        
    - name: Create CodeDeploy Deployment
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODEDEPLOY_APP_NAME }} \
          --deployment-group-name ${{ env.CODEDEPLOY_GROUP_NAME }} \
          --s3-location bucket=${{ env.CODEDEPLOY_BUCKET }},key=hi-meow-app/deploy-${{ github.run_number }}.zip,bundleType=zip \
          --description "Deployment from GitHub Actions workflow" 